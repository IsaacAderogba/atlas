program        -> statement* EOF ;
declaration    -> varDecl
                | statement
                | errorStmt ;
funDecl        -> "fun" function ;
varDecl        -> "var" IDENTIFIER "=" expression ";" ;
statement      -> exprStmt
                | ifStmt
                | whileStmt
                | breakStmt
                | continueStmt
                | block ;
exprStmt       -> expression ";" ;
ifStmt         -> "if" "(" expression ")" statement ( "else" statement )? ;
whileStmt      -> "while" "(" expression ( ";" expression )? ")" statement ;
breakStmt      -> "break" ";" ;
continueStmt   -> "continue" ";" ;
block          -> "{" declaration* "}" ;
expression     -> assignment ;
assignment     -> IDENTIFIER "=" assignment
                | ternary ;
ternary        -> logic_or ( "?" ternary ":" ternary )? ;
logic_or       -> logic_and ( "or" logic_and )* ;
logic_and      -> equality ( "and" equality )* ;
equality       -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison     -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           -> factor ( ( "-" | "+" ) factor )* ;
factor         -> unary ( ( "/" | "*" ) unary )* ;
unary          -> ( "!" | "-" ) unary | call ;
call           -> primary ( "(" arguments? ")" )*;
primary        -> NUMBER | STRING | "true" | "false" | "null" | IDENTIFIER | "(" expression ")" | error ;
arguments      -> expression ( "," expression )* ;
error          -> ( "or" ) logic_or
                | ( "and" ) logic_and
                | ( "!=" | "==" ) equality
                | ( ">" | ">=" | "<" | "<=" ) comparison
                | ( "+" ) term
                | ( "/" | "*" ) factor ;
errorStmt      -> "class" | "fun" | "var" | "for" | "if" | "while" | "return" | ";";

function       -> IDENTIFIER "(" parameters? ")" block ;
parameters     -> parameter ( "," parameter )* ;
parameter      -> IDENTIFIER ;