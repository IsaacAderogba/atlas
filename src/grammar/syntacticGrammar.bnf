program        -> statement* EOF ;
declaration    -> classDecl
                | varDecl
                | moduleDecl
                | namespaceDecl
                | statement
                | errorStmt ;
classDecl      -> "class" IDENTIFIER ( "[" parameters "]" )? ( "implements" typeExpr )? "{" property* "}" ;
moduleDecl     -> "module" IDENTIFIER block ;
namespaceDecl  -> "namespace" IDENTIFIER block ;
varDecl        -> "var" property ;
interfaceDecl  -> "interface" IDENTIFIER ( "[" parameters "]" )? "{" typeProperty* "}" ;
typeDecl       -> "type" IDENTIFIER ( "[" parameters "]" )? "=" typeExpr ;
statement      -> exprStmt
                | ifStmt
                | returnStmt
                | whileStmt
                | breakStmt
                | continueStmt
                | block ;
exprStmt       -> expression ;
ifStmt         -> "if" "(" expression ")" statement ( "else" statement )? ;
returnStmt     -> "return" expression ;
whileStmt      -> "while" "(" expression ( ";" expression )? ")" statement ;
breakStmt      -> "break" ;
continueStmt   -> "continue" ;
block          -> "{" declaration* "}" ;
expression     -> assignment ;
assignment     -> ( call "." )? IDENTIFIER "=" assignment
                | ternary ;
ternary        -> logic_or ( "?" ternary ":" ternary )? ;
logic_or       -> logic_and ( "||" logic_and )* ;
logic_and      -> equality ( "&&" equality )* ;
equality       -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison     -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           -> factor ( ( "-" | "+" | "#" ) factor )* ;
factor         -> unary ( ( "/" | "*" ) unary )* ;
unary          -> ( "!" | "-" ) unary | call ;
call           -> primary ( ( "[" typeExprs "]" )? "(" expressions? ")" | "." name )* ;
primary        -> NUMBER | STRING | "true" | "false" | "null" | "this" | IDENTIFIER | function | list | record | "(" expression ")" | error ;
function       -> "f" "(" parameters? ")" block ;
list           -> "[" expressions* "]" ;
record         -> "{" entries* "}" ;
error          -> ( "||" ) logic_or
                | ( "&&" ) logic_and
                | ( "!=" | "==" ) equality
                | ( ">" | ">=" | "<" | "<=" ) comparison
                | ( "+" | "#" ) term
                | ( "/" | "*" ) factor ;
                | ( ";" ) ;
errorStmt      -> "break" | "continue" | "class" | "var" | "for" | "if" | "while" | "return";

entries        -> entry ( "," entry )* ;
entry          -> STRING ":" expression ;
expressions    -> expression ( "," expression )* ;
property       -> name ( ":" typeExpr )? "=" expression ;
parameters     -> parameter ( "," parameter )* ;
parameter      -> IDENTIFIER ( "extends" typeExpr )?;


typeExpr          -> compositeTypeExpr ;
compositeTypeExpr -> subTypeExpr ( ( "|" | "&" ) subTypeExpr )* ;
subTypeExpr       -> callableType | genericType | name ;
callableTypeExpr  -> "(" typeExprs ")" "->" typeExpr ;
genericType       -> IDENTIFIER ( "[" typeExprs "]" )? ;

typeExprs         -> typeExpr ( "," typeExpr )* ;
typeProperty      -> name ":" typeExpr ;

name              -> IDENTIFIER | KEYWORD ;
