import Future from "future"

var resolvedPromise = Future.Promise[Number](f(resolve, reject) {
  resolve(1)
})

var resolvedPromise2 = Future.Promise[Number](f(resolve, reject) {
  resolve(2)
})

Future.all[Number]([resolvedPromise, resolvedPromise2]).then(f(result) {
    print(result)
})

var countDown: (Number) -> Future.PromiseType[Number] = f(count) {
  return Future.Promise[Number](f(rootResolve, reject) {
    var decrement: (Number) -> Null = f(count) {
      var promise = Future.Promise[Number](f(resolve, reject) {
        if (count <= 0) return rootResolve(count)
        print(count)
        resolve(count - 1)
      })

      promise.then(decrement)
    }

    decrement(count)
  })
}

Future.all[Number]([countDown(5), countDown(5)]).then(f(value) {
  print(value)
})