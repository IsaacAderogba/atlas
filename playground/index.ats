import Exception from "exception"

type CallbackResolver[T] = (T) -> Null
type CallbackRejector = (Exception.ErrorType) -> Null
type Callback[T] = (CallbackResolver[T], CallbackRejector) -> Null

var FULFILLED = "fulfilled"
var REJECTED = "rejected"
var PENDING = "pending"

interface PromiseType[T] {
  value: T
  error: Exception.ErrorType

  call: () -> PromiseType[T]
  then: (CallbackResolver[T]) -> PromiseType[T]
  catch: (CallbackRejector) -> PromiseType[T]
  abort: (String) -> PromiseType[T]
  finally: ((T | Exception.ErrorType) -> Null) -> PromiseType[T]
}

class Promise[T] implements PromiseType[T] {
  valueCbs: List[CallbackResolver[T]] = []
  errorCbs: List[CallbackRejector] = []
  state: String = PENDING

  value: T
  error: Exception.ErrorType

  init: (Callback[T]) -> PromiseType[T] = f(callback) {
    scheduleTask(f() {
     callback(this.onSuccess, this.onFail)
    })
  }

  runCallbacks: () -> Null = f() {
    if (this.state == FULFILLED) {
      this.valueCbs.forEach(f(callback, i) {
        callback(this.value)
      })
      this.valueCbs = []
    } else if (this.state == REJECTED) {
      this.errorCbs.forEach(f(callback, i) {
        callback(this.error)
      })
      this.errorCbs = []
    }
  }

  onSuccess: CallbackResolver[T] = f(value) {
    if (this.state == PENDING) {
      this.value = value
      this.state = FULFILLED
      this.runCallbacks()
    }
  }

  onFail: CallbackRejector = f(error) {
    if (this.state == PENDING) {
      this.error = error
      this.state = REJECTED
      this.runCallbacks()
    }
  }

  call: () -> PromiseType[T] = f() {
    this.runCallbacks()
    runScheduledTasks()
    return this
  }

  then: (CallbackResolver[T]) -> PromiseType[T] = f(valueCb) {
    this.valueCbs.add(valueCb)
    return this.call()
  }

  catch: (CallbackRejector) -> PromiseType[T] = f(errorCb) {
    this.errorCbs.add(errorCb)
    return this.call()
  }

  abort: (String) -> PromiseType[T] = f(message) {
    this.errorCbs.add(f(err) {
      panic message
    })
    return this.call()
  }

  finally: ((T | Exception.ErrorType) -> Null) -> PromiseType[T] = f(callback) {
    this.valueCbs.add(callback)
    this.errorCbs.add(callback)
    return this.call()
  }
}

var resolvedPromise = Promise[Number](f(resolve, reject) {
  resolve(1)
})

resolvedPromise
  .call()
  .then(f(num) {
    print(num + num)
  })

